{"version":3,"file":"index.mjs","sources":["../lib/accessors.js","../lib/ndarray.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2025 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @private\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Object} x - input array object\n* @param {Collection} x.data - input array data\n* @param {Array<Function>} x.accessors - array element accessors\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* import toAccessorArray from '@stdlib/array-base-to-accessor-array';\n* import arraylike2object from '@stdlib/array-base-arraylike2object';\n*\n* var x = toAccessorArray( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n*\n* var v = gsumpw( 4, arraylike2object( x ), 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, strideX, offsetX ) {\n\tvar xbuf;\n\tvar get;\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar n;\n\tvar s;\n\tvar i;\n\n\t// Cache reference to array data:\n\txbuf = x.data;\n\n\t// Cache a reference to the element accessor:\n\tget = x.accessors[ 0 ];\n\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * get( xbuf, ix );\n\t}\n\n\tif ( N <= 8 ) {\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = get( xbuf, ix );\n\t\ts1 = get( xbuf, ix+strideX );\n\t\ts2 = get( xbuf, ix+(2*strideX) );\n\t\ts3 = get( xbuf, ix+(3*strideX) );\n\t\ts4 = get( xbuf, ix+(4*strideX) );\n\t\ts5 = get( xbuf, ix+(5*strideX) );\n\t\ts6 = get( xbuf, ix+(6*strideX) );\n\t\ts7 = get( xbuf, ix+(7*strideX) );\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += get( xbuf, ix );\n\t\t\ts1 += get( xbuf, ix+strideX );\n\t\t\ts2 += get( xbuf, ix+(2*strideX) );\n\t\t\ts3 += get( xbuf, ix+(3*strideX) );\n\t\t\ts4 += get( xbuf, ix+(4*strideX) );\n\t\t\ts5 += get( xbuf, ix+(5*strideX) );\n\t\t\ts6 += get( xbuf, ix+(6*strideX) );\n\t\t\ts7 += get( xbuf, ix+(7*strideX) );\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += get( xbuf, ix );\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, strideX, ix ) + gsumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport floor from '@stdlib/math-base-special-floor';\nimport arraylike2object from '@stdlib/array-base-arraylike2object';\nimport accessors from './accessors.js';\n\n\n// VARIABLES //\n\n// Blocksize for pairwise summation (NOTE: decreasing the blocksize decreases rounding error as more pairs are summed, but also decreases performance. Because the inner loop is unrolled eight times, the blocksize is effectively `16`.):\nvar BLOCKSIZE = 128;\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @param {NonNegativeInteger} offsetX - starting index\n* @returns {number} sum\n*\n* @example\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumpw( 4, x, 2, 1 );\n* // returns 5.0\n*/\nfunction gsumpw( N, x, strideX, offsetX ) {\n\tvar ix;\n\tvar s0;\n\tvar s1;\n\tvar s2;\n\tvar s3;\n\tvar s4;\n\tvar s5;\n\tvar s6;\n\tvar s7;\n\tvar M;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn 0.0;\n\t}\n\to = arraylike2object( x );\n\tif ( o.accessorProtocol ) {\n\t\treturn accessors( N, o, strideX, offsetX );\n\t}\n\tix = offsetX;\n\tif ( strideX === 0 ) {\n\t\treturn N * x[ ix ];\n\t}\n\tif ( N < 8 ) {\n\t\t// Use simple summation...\n\t\ts = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\tif ( N <= BLOCKSIZE ) {\n\t\t// Sum a block with 8 accumulators (by loop unrolling, we lower the effective blocksize to 16)...\n\t\ts0 = x[ ix ];\n\t\ts1 = x[ ix+strideX ];\n\t\ts2 = x[ ix+(2*strideX) ];\n\t\ts3 = x[ ix+(3*strideX) ];\n\t\ts4 = x[ ix+(4*strideX) ];\n\t\ts5 = x[ ix+(5*strideX) ];\n\t\ts6 = x[ ix+(6*strideX) ];\n\t\ts7 = x[ ix+(7*strideX) ];\n\t\tix += 8 * strideX;\n\n\t\tM = N % 8;\n\t\tfor ( i = 8; i < N-M; i += 8 ) {\n\t\t\ts0 += x[ ix ];\n\t\t\ts1 += x[ ix+strideX ];\n\t\t\ts2 += x[ ix+(2*strideX) ];\n\t\t\ts3 += x[ ix+(3*strideX) ];\n\t\t\ts4 += x[ ix+(4*strideX) ];\n\t\t\ts5 += x[ ix+(5*strideX) ];\n\t\t\ts6 += x[ ix+(6*strideX) ];\n\t\t\ts7 += x[ ix+(7*strideX) ];\n\t\t\tix += 8 * strideX;\n\t\t}\n\t\t// Pairwise sum the accumulators:\n\t\ts = ( (s0+s1) + (s2+s3) ) + ( (s4+s5) + (s6+s7) );\n\n\t\t// Clean-up loop...\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ts += x[ ix ];\n\t\t\tix += strideX;\n\t\t}\n\t\treturn s;\n\t}\n\t// Recurse by dividing by two, but avoiding non-multiples of unroll factor...\n\tn = floor( N/2 );\n\tn -= n % 8;\n\treturn gsumpw( n, x, strideX, ix ) + gsumpw( N-n, x, strideX, ix+(n*strideX) ); // eslint-disable-line max-len\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport stride2offset from '@stdlib/strided-base-stride2offset';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\n/**\n* Computes the sum of strided array elements using pairwise summation.\n*\n* ## Method\n*\n* -   This implementation uses pairwise summation, which accrues rounding error `O(log2 N)` instead of `O(N)`. The recursion depth is also `O(log2 N)`.\n*\n* ## References\n*\n* -   Higham, Nicholas J. 1993. \"The Accuracy of Floating Point Summation.\" _SIAM Journal on Scientific Computing_ 14 (4): 783–99. doi:[10.1137/0914050](https://doi.org/10.1137/0914050).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - stride length\n* @returns {number} sum\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumpw( x.length, x, 1 );\n* // returns 1.0\n*/\nfunction gsumpw( N, x, strideX ) {\n\treturn ndarray( N, x, strideX, stride2offset( N, strideX ) );\n}\n\n\n// EXPORTS //\n\nexport default gsumpw;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of strided array elements using pairwise summation.\n*\n* @module @stdlib/blas-ext-base-gsumpw\n*\n* @example\n* import gsumpw from '@stdlib/blas-ext-base-gsumpw';\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n*\n* var v = gsumpw( x.length, x, 1 );\n* // returns 1.0\n*\n* @example\n* import gsumpw from '@stdlib/blas-ext-base-gsumpw';\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n*\n* var v = gsumpw.ndarray( 4, x, 2, 1 );\n* // returns 5.0\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport main from './main.js';\nimport ndarray from './ndarray.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["BLOCKSIZE","gsumpw","N","x","strideX","offsetX","xbuf","get","ix","s0","s1","s2","s3","s4","s5","s6","s7","M","n","s","i","data","accessors","floor","o","arraylike2object","accessorProtocol","ndarray","stride2offset","setReadOnly","main"],"mappings":"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"}